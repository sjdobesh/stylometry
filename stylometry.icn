#--------------------------------------#
# Stylometric Analysis                 |
# Author: Samuel Dobesh                |
# Desc: Process a piece of text and    |
#       produce a stats, words, and    |
#       oddwords analysis files        |
#--------------------------------------#--------------------------------------80

# Links
link options
link lists

# VALIDATION PROCEDURE #--------------------------------------------------------
procedure validate(arguments)
  usage := "Argument Error\nUsage:\n./prog4 [-d dictionary] [-f file]"
  # check number of arguments
  if *arguments != 4 then {
    write(usage)
    fail
  }
  # using options.icn parser
  opt_table := options(arguments,"d:f:")
  return \opt_table
end

# NAME EXTRACTION PROCEDURE #---------------------------------------------------
procedure extract_name(file_path)
  # get the portion of string after the last "/"
  file_path ? {
    while tab(upto("/")) do
      tab(many("/"))
    # remove ".txt"
    return (tab(find(".")))
  }
end


# SENTENCE GEN PROCEDURE #------------------------------------------------------
procedure get_sentences(str)
  str ? {
    while tab(upto(".")) do {
      sentence := tab(many("."))
      suspend sentence
    }
  }
end

# WORD GEN PROCEDURES #----------------------------------------------------------
procedure gen_words(str)
  str ? {
    while tab(upto(&letters || '.-"\'')) do {
      word := tab(many(&letters || '.-"\''))
      suspend word
    }
  }
end

# TABLE GENERATORS ROCEDURES #---------------------------------------------------
procedure get_words(str)
  words := table(0)
  str ? {
    while tab(upto(&letters)) do
      words[tab(many(&letters))]+:=1
  }
  return words
end

procedure file_sentences(input)
  count := table(0)
  while line := read(input) do {
    line ? {
      while tab(upto(" ")) do
        count[tab(many(" "))]+:=1
    }
  }
  return count
end

procedure words_table(input)
  count := table(0)
  while line := read(input) do {
    line ? {
      while tab(upto(&letters)) do
        count[tab(many(&letters))]+:=1
    }
  }
  return count
end

procedure words_list(input)
  count := list(0)
  while line := read(input) do {
    line ? {
      while tab(upto(&letters)) do
        put(count, (tab(many(&letters))))
    }
  }
  return lreverse(count)
end

# make a list of each paragraph
procedure paragraphs_list(input)

  # vars
  paragraphs := list(0) # (p)aragraph list to accumulate
  p          := ""      # string to accumulate each p into
  on_p       := 0       # flag for whether the current scan is part of a p
  last       := 0       # weather the last scan was part of a p

  # read in each line
  while line := read(input) do {
    # flag tells us wether this is a paragraph or not
    if *line == 0 then on_p := 0 else on_p := 1
    # accumulate
    if on_p = 1 then {
      p ||:= (line ||:= ' ')
    }
    # add entry to the paragraph list
    else if on_p = 0 & last = 1 then {
      put(paragraphs, p)
      p := ""
    }
    # keep track of last scan
    last := on_p
  }

  # check if we exited loop on a paragraph
  if on_p = 1 then {
    put(paragraphs, p)
  }
  # reverse before returning
  return lreverse(paragraphs)
end


# make a list of each sentence
procedure sentence_list(input)
  sentence := list(0)
  input ? {
    while tab(upto(&letters)) do {
      put(sentence, tab(many(',:; '++&letters)))
    }
  }
  return sentence
end


# make a list of each word
procedure word_list(input)
  words := list(0)
  input ? {
    while tab(upto(&letters)) do {
      put(words, tab(many(&letters)))
    }
  }
  return words
end

# MAIN #------------------------------------------------------------------------
procedure main(args)

  # read args
  arg_table := validate(args) | exit(-1)

  # open files to read in data
  dict   := open(\arg_table["d"]) | stop("Couldn't open dictionary")
  intext := open(\arg_table["f"]) | stop("Couldn't open file")

  # extract name for output files
  x := extract_name(arg_table["f"])
  write("Extracted name : ", x)
  # concatenate new file names
  xs_name := x || "-stats.txt"
  xw_name := x || "-words.txt"
  xo_name := x || "-oddwords.txt"

  # open output files for writing
  x_stats := open(xs_name, "w") | stop("Error opening file")
  x_words := open(xw_name, "w") | stop("Error opening file")
  x_odd   := open(xo_name, "w") | stop("Error opening file")

  # read in text to analyze

  # data needed:
  #     words :    word frequencies sorted by frequency and lexical order
  #     oddwords : collect any word not present in a dictionary
  #     stats :    # of paragraphs, avg length in sentences, words, chars
  #                # of sentences, avg length in phrases words, chars
  #                # of phrases, avg length in words, chars

  # generate paragraphs (one or more blank lines)
  paragraphs := paragraphs_list(intext)
  # check paragraph contents
  every i := 1 to *paragraphs do write("p ", i, "\n", paragraphs[i])
  write("\n\n")

  # generate sentences
  sentence_tree := list(0)
  every i := 1 to *paragraphs do {
    s_list := sentence_list(paragraphs[i])
    put(sentence_tree, s_list)
  }

  every i := 1 to *sentence_tree do {
    write("P ", i)
    every j := 1 to *sentence_tree[i] do {
      write("S ", j)
      write(sentence_tree[i][j])
    }
  }
  # generate phrases

  # generate words

  # CALC XSTATS #-------------------------------------------
  # WRITE TO XSTATS #---------------------------------------
  #writes("paragraphs\t", *paragraphs)
  #writes("\taverage length\t")
  #if sntc_len == 1 then unit := "sentence" else unit := "sentences"
  #writes(sntc_len, " ", unit, "\t")

  # generate sentences (!?.)

  # generate phrases (!,.?;:)

  # generate words (space)

  # end




  # # global sentence word count
  # words  := file_words(intext)
  # words  := lreverse(sort(words, 3))
  # unique := *words / 2
  # every 1 to *words do write(pull(words), "\t: ", pull(words))
  # write(unique, " unique words found.")





# NOTES


#  # sort by frequency (greatest to least)
#  intext := open(\arg_table["f"]) | stop("Couldn't open file")
#  words  := file_sentences(intext)
#  words  := sort(words, 4)
#  every 1 to *words do write(pull(words), "\t: ", pull(words))



  # This was work started on extracting words into outer loop and
  # concatenating the results

  #words := table(0)
  #while line := read(intext) do {
  #  word := get_words(line)
  #  if member(words, word) then words[word] +:= 1 else insert(words, word, 1)
  #}
  #unique := *words / 2
  #words  := sort(words, 4)
  #every 1 to *words do write(pull(words), "\t: ", pull(words))
  #write(unique, " unique words found.")

  # global unique word count
  #words  := file_count(intext)
  #words  := lreverse(sort(words, 3))
  #unique := *words / 2
  #every 1 to *words do write(pull(words), "\t: ", pull(words))
  #write(unique, " unique words found.")

  ## sort by frequency (greatest to least)
  #intext := open(\arg_table["f"]) | stop("Couldn't open file")
  #words  := file_count(intext)
  #words  := sort(words, 4)
  #every 1 to *words do write(pull(words), "\t: ", pull(words))

#  words := table(0)
#  while (line := read(intext)) do {
#    every words[get_words(line)] +:= 1
#    words := sort(words, 3) # <=== This is sorting by key val
#    size := *words / 2;
#    every 1 to size do {
#      pull(words)
#      write(pull(words))
#    }
#  }


#  w_count := 0
#  l_count := 0
#  while (line := read(intext)) do {
#    # for each line, break into words
#    line ? {
#      # first word
#      write(get_words(tab(0)))
#      tab(1)
#      # every other word
#      every tab(upto(' ')) do {
#        write(get_words(tab(upto(' '))))
#        w_count +:= 1
#      }
#      # collect last word in the line
#      write(get_words(tab(upto(' '))))
#      w_count +:= 1
#    }
#    l_count +:= 1
#  }
#  write("Line Count = ", l_count)
#  write("Word Count = ", w_count)
end
